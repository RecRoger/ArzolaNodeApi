<h5>
    <a href="/">
        <button class="btn btn-link">
            < </button></a>
    Chat de clientes
</h5>

<div class="row">
    <div class="col-3">
        <div class="card p-3 h-100">
            <b class="mb-2">Usuarios conectados</b>
            <ul id="usersContainer" class="list-group list-group-flush">


            </ul>
        </div>
    </div>
    <div class="col-9" style="height: 650px;">
        <div class="card card-body h-100 d-flex flex-column">
            <div id="messagesContainer" class="h-100 d-flex flex-column overflow-auto pb-4 pe-2">

            </div>

            <form id="form" class="mt-auto" action="">
                <div class="input-group mb-2">
                    <input type="text" class="form-control" id="username" name="username" placeholder="Nombre"
                        style="max-width: 150px">
                    <input type="text" class="form-control" id="message" name="message" placeholder="Mensaje">
                    <button type="submit" class="btn btn-dark ms-auto">Enviar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>

    const socket = io();

    const formElement = document.getElementById('form')
    const usernameInput = document.getElementById('username')
    const messageInput = document.getElementById('message')
    const containerElement = document.getElementById('messagesContainer')
    const usersElement = document.getElementById('usersContainer')

    const messageTemplate = (chatMessage) => {
        let date = (new Date(chatMessage.date)).toLocaleString()
        if (date.includes((new Date()).toLocaleDateString())) {
            date = date.split(', ')[1]
        }
        return `
        <div class="chatMessage d-flex w-100 mb-2 w-75">
            <div class="card p-3 ${chatMessage.user === usernameInput.value ? 'ms-auto bg-light' : 'me-auto'}">
                <b class="me-5">${chatMessage.user}</b>
                <div>
                   ${chatMessage.message}
                </div>
                <div class="text-black-50 ms-auto">${date}</div>
            </div>
        </div>`
    }


    socket.on('set old messages', function (chat) {
        let template = '';
        chat.forEach(chatMessage => {
            template += messageTemplate(chatMessage)
        })
        containerElement.innerHTML = template
        scrollToBottom()
    });

    socket.on('set users', function (users) {
        console.log('los users: ', users)
        usersElement.innerHTML = users.map(usr => `
            <li class="list-group-item ${usr === usernameInput.value ? 'bg-light' : ''}">${usr}</li>
        `).join('')
    });

    socket.on('set message', function (msg) {
        let template = messageTemplate(msg)
        containerElement.innerHTML += template
        scrollToBottom()
    });

    socket.on('user enter', function (user) {
        containerElement.innerHTML += `
        <div class="w-100 p-4 text-center">
            --- ${user} ha entrado en la sala ---
        </div>
        `
        scrollToBottom()
    });
    socket.on('user leave', function (user) {
        containerElement.innerHTML += `
        <div class="w-100 p-4 text-center">
            --- <b>${user}</b> ha abandonado la sala ---
        </div>
        `
        scrollToBottom()
    });

    formElement.addEventListener('submit', (e) => send(e))

    function send(e) {
        e.preventDefault();
        const username = usernameInput.value;
        const message = messageInput.value;

        if (username && message) {
            socket.emit('incoming message', { username, message });
            usernameInput.setAttribute('readonly', true)
            messageInput.value = ""
        }
    }

    function scrollToBottom() {
        containerElement.scrollTop = containerElement.scrollHeight
    }

</script>